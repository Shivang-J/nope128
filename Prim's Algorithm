#include <iostream>
#include <limits>
#define MAX_VERTICES 100
using namespace std;

int minKey(int key[], bool inMST[], int V) {
    int min = numeric_limits<int>::max();
    int min_index;

    for (int v = 0; v < V; v++) {
        if (!inMST[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool inMST[MAX_VERTICES];

    // Initialize arrays
    for (int i = 0; i < V; i++) {
        key[i] = numeric_limits<int>::max();
        inMST[i] = false;
        parent[i] = -1;
    }

    key[0] = 0;
    parent[0] = -1;

    // Construct the MST
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, inMST, V);
        inMST[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !inMST[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the MST
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << " \n";
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};
    int V, E;

    cout << "Enter the number of vertices: ";
    cin >> V;

    cout << "Enter the number of edges: ";
    cin >> E;

    cout << "Enter the edges in the format (u v weight):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;
        graph[u][v] = weight;
        graph[v][u] = weight;
    }

    primMST(graph, V);
    return 0;
}
